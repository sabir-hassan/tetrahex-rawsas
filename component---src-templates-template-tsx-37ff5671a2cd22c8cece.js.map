{"version":3,"sources":["webpack:///./src/templates/template.tsx"],"names":["getDescription","content","s","document","span","createElement","innerHTML","textContent","innerText","extractContent","substr","Template","data","location","pageContext","meta","site","archives","title","post","frontmatter","customDescription","html","options","isIndex","pageQuery"],"mappings":"4FACA,8GAgBMA,EAAiB,SAACC,GACtB,OATqB,SAACC,GACtB,GAAI,oBAAOC,SAA0B,CACnC,IAAMC,EAAOD,SAASE,cAAc,QAEpC,OADAD,EAAKE,UAAYJ,EACVE,EAAKG,aAAeH,EAAKI,UAElC,OAAON,EAGAO,CAAeR,GAASS,OAAO,EAAG,KAAO,OAyCnCC,UAzBmB,SAAC,GAA2C,YAAzCC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,YAC7CC,EAAO,OAAH,oBACLH,EAAKI,YADA,aACL,EAAWD,KADN,CAERF,aAGF,OACE,6BACE,kBAAC,IAAD,CAAQI,SAAUH,EAAYG,UAC5B,kBAAC,IAAD,CACEC,OAAO,UAAAN,EAAKO,YAAL,mBAAWC,mBAAX,eAAwBF,QAAS,GACxCF,KAAMD,EACNM,kBAAmBrB,GAAe,UAAAY,EAAKO,YAAL,eAAWG,OAAQ,MAEvD,kBAAC,IAAD,CACEV,KAAMA,EACNW,QAAS,CACPC,SAAS,QAUd,IAAMC,EAAY","file":"component---src-templates-template-tsx-37ff5671a2cd22c8cece.js","sourcesContent":["import { graphql } from 'gatsby'\nimport React from 'react'\n\nimport Post from './post/post'\nimport Meta from '../components/meta/meta'\nimport Layout from '../components/layout/layout'\nimport Page from './page/page'\nimport { PostByPath } from '../../types/graphql-types'\n\nconst extractContent = (s: string): string => {\n  if (typeof document !== `undefined`) {\n    const span = document.createElement('span')\n    span.innerHTML = s\n    return span.textContent || span.innerText\n  }\n  return s\n}\nconst getDescription = (content: string): string => {\n  return extractContent(content).substr(0, 250) + '...'\n}\n\ninterface Props {\n  data: PostByPath\n  location: Location\n  pageContext: {\n    page: string\n    archives: { [key: string]: string }\n    numPages: number\n    currentPage: number\n    year?: string\n    tag?: string\n  }\n}\n\nconst Template: React.FC<Props> = ({ data, location, pageContext }: Props) => {\n  const meta = {\n    ...data.site?.meta,\n    location,\n  }\n\n  return (\n    <div>\n      <Layout archives={pageContext.archives}>\n        <Meta\n          title={data.post?.frontmatter?.title || ''}\n          site={meta}\n          customDescription={getDescription(data.post?.html || '')}\n        />\n        <Post\n          data={data}\n          options={{\n            isIndex: false,\n          }}\n        />\n      </Layout>\n    </div>\n  )\n}\n\nexport default Template\n\nexport const pageQuery = graphql`\n  query PostByPath($path: String!) {\n    site {\n      meta: siteMetadata {\n        title\n        description\n      }\n    }\n    post: markdownRemark(frontmatter: { path: { eq: $path } }) {\n      id\n      html\n      frontmatter {\n        title\n        path\n        previewImg {\n          childImageSharp {\n            fluid(maxWidth: 800) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        tags\n        date(formatString: \"MMM DD, YYYY\")\n      }\n    }\n  }\n`\n"],"sourceRoot":""}