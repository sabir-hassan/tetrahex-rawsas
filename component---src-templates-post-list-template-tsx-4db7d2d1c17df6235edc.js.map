{"version":3,"sources":["webpack:///./src/templates/post-list-template.tsx"],"names":["BlogIndex","data","location","pageContext","posts","remark","meta","site","iniPath","page","year","kebabCase","tag","newerPath","currentPage","olderPath","numPages","archives","map","post","i","options","isIndex","key","to","className","pageQuery"],"mappings":"6FAAA,+IA4EeA,UAtDoB,SAAC,GAA2C,MAAzCC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,YAC9CC,EAAQH,EAAKI,OAAOD,MACpBE,EAAO,OAAH,oBAAQL,EAAKM,YAAb,aAAQ,EAAWD,KAAnB,CAAyBJ,aAE7BM,EACgB,SAApBL,EAAYM,KAAZ,IAEwB,QAApBN,EAAYM,KAAZ,IACIN,EAAYO,KADhB,IAEoB,YAApBP,EAAYM,KAAZ,aACaE,IAAUR,EAAYS,KADnC,IAEA,KAEAC,EACO,MAAXL,GAE+B,GAA3BL,EAAYW,YADZ,KAG2B,GAA3BX,EAAYW,YACZN,EACGA,EAFH,SAEkBL,EAAYW,YAAc,GAC5CC,EACO,MAAXP,GAEIL,EAAYW,aAAeX,EAAYa,SADvC,KAGGR,EAFH,SAEkBL,EAAYW,YAAc,GAElD,OACE,kBAAC,IAAD,CAAQG,SAAUd,EAAYc,UAC5B,kBAAC,IAAD,CAAMV,KAAMD,IACXF,EAAMc,KAAI,SAACC,EAAMC,GAAP,OACT,kBAAC,IAAD,CACEnB,KAAMkB,EACNE,QAAS,CACPC,SAAS,GAEXC,IAAKH,OAGRL,GACC,kBAAC,OAAD,CAAMS,GAAIT,EAAWU,UAAU,cAA/B,mBAIDZ,GACC,kBAAC,OAAD,CAAMW,GAAIX,EAAWY,UAAU,eAA/B,oBAUD,IAAMC,EAAY","file":"component---src-templates-post-list-template-tsx-4db7d2d1c17df6235edc.js","sourcesContent":["import { graphql, Link } from 'gatsby'\nimport React from 'react'\nimport kebabCase from 'lodash/kebabCase'\n\nimport { BlogListQuery, PostByPathQuery } from '../../types/graphql-types'\nimport Post from '../templates/post/post'\nimport Meta from '../components/meta/meta'\nimport Layout from '../components/layout/layout'\n\ninterface Props {\n  data: BlogListQuery\n  location: Location\n  pageContext: {\n    page: string\n    archives: { [key: string]: string }\n    numPages: number\n    currentPage: number\n    year?: string\n    tag?: string\n  }\n}\n\nconst BlogIndex: React.FC<Props> = ({ data, location, pageContext }: Props) => {\n  const posts = data.remark.posts\n  const meta = { ...data.site?.meta, location }\n\n  const iniPath =\n    pageContext.page == 'index'\n      ? `/`\n      : pageContext.page == 'year'\n      ? `/${pageContext.year}/`\n      : pageContext.page == 'category'\n      ? `/category/${kebabCase(pageContext.tag)}/`\n      : null\n\n  const newerPath =\n    iniPath == null\n      ? null\n      : pageContext.currentPage == 1\n      ? null\n      : pageContext.currentPage == 2\n      ? iniPath\n      : `${iniPath}page/${pageContext.currentPage - 1}`\n  const olderPath =\n    iniPath == null\n      ? null\n      : pageContext.currentPage == pageContext.numPages\n      ? null\n      : `${iniPath}page/${pageContext.currentPage + 1}`\n\n  return (\n    <Layout archives={pageContext.archives}>\n      <Meta site={meta} />\n      {posts.map((post, i) => (\n        <Post\n          data={post as PostByPathQuery}\n          options={{\n            isIndex: true,\n          }}\n          key={i}\n        />\n      ))}\n      {olderPath && (\n        <Link to={olderPath} className=\"float-left\">\n          « Older Entries\n        </Link>\n      )}\n      {newerPath && (\n        <Link to={newerPath} className=\"float-right\">\n          Next Entries »\n        </Link>\n      )}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query BlogListQuery(\n    $filter: MarkdownRemarkFilterInput!\n    $skip: Int!\n    $limit: Int!\n  ) {\n    site {\n      meta: siteMetadata {\n        title\n        description\n      }\n    }\n    remark: allMarkdownRemark(\n      filter: $filter\n      limit: $limit\n      skip: $skip\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      posts: edges {\n        post: node {\n          html\n          frontmatter {\n            title\n            path\n            previewImg {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            tags\n            date(formatString: \"MMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}